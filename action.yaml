name: 'JFROG XRAY Result Prettifier'
description: 'A github action which takes the output of a jfrog xray scan in json and formats it to GITHUB MARKDOWN'
inputs:
  XRAY_RESULTS_JSON_FILE:
    description: 'the path to the json file containing the xray scan results'
    required: true
    default: "./xray_results.json"
  BUILD_NAME:
    description: 'the name of the build'
    required: true
  BUILD_NUMBER:
    description: 'the number of the build'
    required: true
  FAIL_BUILD:
    description: 'if true, the action will fail the build if any vulnerabilities are found'
    required: false
    default: "false"
  ISSUE_URL_TEMPLATE:
    description: |
      A python format string that can be specified to generate a link to a new "ignore this vulnerability" issue.
      The format string may contain the following fields:
      possible_reason: a sample description of why the vulnerability is not a problem
      cve_id: the cve id of the vulnerability
      violation_id: the violation id of the vulnerability, same as the cve id
      build_name: the name of the build
      build_number: the number of the build
      build_version: the number of the build.  synonumous with build_number
      example: https://github.com/myorg/exception-requests/issues/new?assignees=&labels=approved%2Capplied&projects=&template=JFrog_exception_request.yml&title=My+Exception+Request+for+{build_name}+(build_number}+{cve_id}&business_unit=someunit&build_name={build_name}&build_number={build_number}&violation_id={violation_id}&business_justification={possible_reason}&build_repository=repo
    required: false
    default: "NA"
  TEAMS_WEBHOOK:
    description: 'the webhook to send the results to a teams channel'
    required: false
    default: "NA"
runs:
  using: 'composite'
  steps:
    - name: 'Set up Python 3.8'
      uses: actions/setup-python@v4.3.0
      with:
        python-version: 3.8
    - name: 'Install Python dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install requests
      shell: bash
    - name: render markdown
      id: render
      run: |
        cat << EOF >> getbuild.py
        import xraysummaryparser
        xray = xraysummaryparser.XrayPrettifier()
        xray.set_build_name("${{ inputs.BUILD_NAME }}")
        xray.set_build_number("${{ inputs.BUILD_NUMBER }}")
        xray.set_fail_build("${{ inputs.FAIL_BUILD }}" == "true")
        xray.set_issue_template("${{ inputs.ISSUE_URL_TEMPLATE }}")
        xray.set_teams_webhook("${{ inputs.TEAMS_WEBHOOK }}")
        xray.analyze_results("${{ inputs.XRAY_RESULTS_JSON_FILE }}")
        EOF
        python getbuild.py >> $GITHUB_STEP_SUMMARY
      shell: bash